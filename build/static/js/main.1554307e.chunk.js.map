{"version":3,"sources":["components/PhotoGallery.js","App.js","serviceWorker.js","index.js"],"names":["PhotoGallery","props","photos","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","openLightbox","useCallback","event","photo","index","onClick","margin","onClose","currentIndex","views","map","x","srcset","srcSet","caption","title","App","state","fetch","then","res","json","p","src","url","width","w","height","h","date","sort","a","b","Date","setState","className","rel","target","href","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQA2EeA,MApDf,SAAsBC,GAAQ,IACpBC,EAAWD,EAAXC,OADmB,EAEaC,mBAAS,GAFtB,mBAEpBC,EAFoB,KAENC,EAFM,OAGaF,oBAAS,GAHtB,mBAGpBG,EAHoB,KAGNC,EAHM,KAMrBC,EAAeC,uBAAY,SAACC,EAAD,GAA6B,EAAnBC,MAAoB,IAAbC,EAAY,EAAZA,MAChDP,EAAgBO,GAChBL,GAAgB,KACf,IAsBH,OACE,6BACE,kBAAC,IAAD,CAASL,OAAQA,EAAQW,QAASL,EAAcM,OAAQ,IACxD,kBAAC,IAAD,KACGR,EACC,kBAAC,IAAD,CAAOS,QAzBO,WACpBV,EAAgB,GAChBE,GAAgB,KAwBR,kBAAC,IAAD,CACES,aAAcZ,EACda,MAAOf,EAAOgB,KAAI,SAAAC,GAAC,kCACdA,GADc,IAEjBC,OAAQD,EAAEE,OACVC,QAASH,EAAEI,cAIf,QCbGC,G,yDAjDb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,MAAQ,CACXvB,OAAQ,IAHO,E,gEAOE,IAAD,OAClBwB,MAXc,0DAYXC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,IAAI3B,EAAS2B,EACVX,KAAI,SAACY,GAAD,MAAQ,CACXC,IAAKD,EAAEE,IACPC,MAAOH,EAAEI,EACTC,OAAQL,EAAEM,EACVb,MAAOO,EAAER,QACTe,KAAMP,EAAEO,SAETC,MAAK,SAACC,EAAGC,GAAJ,OAAU,IAAIC,KAAKD,EAAEH,MAAQ,IAAII,KAAKF,EAAEF,SAEhD,EAAKK,SAAS,CAAExC,OAAQA,S,+BAK5B,OACE,yBAAKyC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,gBAAf,eACA,yBAAKA,UAAU,mBACb,uBACEC,IAAI,sBACJC,OAAO,SACPC,KAAK,gCAHP,iBAMK,IAPP,gBAUA,kBAAC,EAAD,CAAc5C,OAAQ6C,KAAKtB,MAAMvB,gB,GA1C3B8C,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,iB","file":"static/js/main.1554307e.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\n\n// function CustomImageComponent(index, photo, margin) {\n//   console.log(index, photo, margin)\n//   return(\n//     <div className=\"imageContainer\"\n//        style={{ margin, height: photo.height, width: photo.width}}>\n//       <img\n//         alt={photo.title}\n//         src={photo.src}\n//         // style={\n//         //   isSelected ? { ...imgStyle, ...selectedImgStyle } : { ...imgStyle }\n//         // }\n//         {...photo}\n//         // onClick={handleOnClick}\n//       />\n//     </div>\n    \n//   )\n// }\n\nfunction PhotoGallery(props) {\n  const { photos } = props;\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  // const imageRenderer = useCallback(\n  //   ({ index, left, top, key, photo }) => (\n  //     <CustomImageComponent\n  //       // selected={selectAll ? true : false}\n  //       key={key}\n  //       margin={\"2px\"}\n  //       index={index}\n  //       photo={photo}\n  //       left={left}\n  //       top={top}\n  //     />\n  //   ), []\n  // );\n\n\n  return (\n    <div>\n      <Gallery photos={photos} onClick={openLightbox} margin={5} />\n      <ModalGateway>\n        {viewerIsOpen ? (\n          <Modal onClose={closeLightbox}>\n            <Carousel\n              currentIndex={currentImage}\n              views={photos.map(x => ({\n                ...x,\n                srcset: x.srcSet,\n                caption: x.title\n              }))}\n            />\n          </Modal>\n        ) : null}\n      </ModalGateway>\n    </div>\n  );\n}\n\nexport default PhotoGallery;\n","import React, { Component } from \"react\";\nimport PhotoGallery from \"./components/PhotoGallery.js\";\nimport \"./App.scss\";\n\nconst INDEX_URL = \"https://pcrowe-photography.s3.amazonaws.com/index.json\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      photos: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(INDEX_URL)\n      .then((res) => res.json())\n      .then((json) => {\n        let photos = json\n          .map((p) => ({\n            src: p.url,\n            width: p.w,\n            height: p.h,\n            title: p.caption,\n            date: p.date,\n          }))\n          .sort((a, b) => new Date(b.date) - new Date(a.date));\n\n        this.setState({ photos: photos });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Container\">\n          <div className=\"Content\">\n            <div className=\"GalleryTitle\">photography</div>\n            <div className=\"GallerySubTitle\">\n              <a\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href=\"https://www.prestoncrowe.com\"\n              >\n                preston crowe\n              </a>{\" \"}\n              takes photos\n            </div>\n            <PhotoGallery photos={this.state.photos} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}